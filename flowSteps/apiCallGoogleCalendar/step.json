{
  "label": "API call to googlecalendar",
  "name": "apiCallGoogleCalendar",
  "category": "integrations",
  "description": "This flow step will send generic request to googlecalendar",
  "inputs": [
    {
      "label": "Url",
      "name": "url",
      "description": "The method and path to which this endpoint is to send requests in a generic way.",
      "type": "urlParams",
      "required": "true",
      "options": {
        "type": "dropDown",
        "possibleValues": [
            {
              "label": "DELETE /calendars/{calendarId}/acl/{ruleId}"
            },
            {
              "label": "DELETE /users/me/calendarList/{calendarId}"
            },
            {
              "label": "DELETE /calendars/{calendarId}/events/{eventId}"
            },
            {
              "label": "GET /calendars/{calendarId}/acl"
            },
            {
              "label": "GET /calendars/{calendarId}/acl/{ruleId}"
            },
            {
              "label": "GET /users/me/calendarList"
            },
            {
              "label": "GET /users/me/calendarList/{calendarId}"
            },
            {
              "label": "GET /users/me/calendarList/{calendarId}"
            },
            {
              "label": "GET /calendars/{calendarId}"
            },
            {
              "label": "GET /colors"
            },
            {
              "label": "GET /calendars/{calendarId}/events"
            },
            {
              "label": "GET /calendars/{calendarId}/events/{eventId}"
            },
            {
              "label": "GET /calendars/{calendarId}/events/{eventId}/instances"
            },
            {
              "label": "GET /users/me/settings"
            },
            {
              "label": "GET /users/me/settings/{setting}"
            },
            {
              "label": "GET /users/me/settings/{setting}"
            },
            {
              "label": "POST /calendars/{calendarId}/acl"
            },
            {
              "label": "POST /calendars/{calendarId}/acl/watch"
            },
            {
              "label": "POST /users/me/calendarList"
            },
            {
              "label": "POST /users/me/calendarList/watch"
            },
            {
              "label": "POST /calendars/{calendarId}/clear"
            },
            {
              "label": "POST /calendars"
            },
            {
              "label": "POST /calendars/{calendarId}"
            },
            {
              "label": "POST /calendars/{calendarId}"
            },
            {
              "label": "POST /channels/stop"
            },
            {
              "label": "POST /calendars/{calendarId}/events/import"
            },
            {
              "label": "POST /calendars/{calendarId}/events"
            },
            {
              "label": "POST /calendars/{calendarId}/events/{eventId}/move"
            },
            {
              "label": "POST /calendars/{calendarId}/events/quickAdd"
            },
            {
              "label": "POST /calendars/{calendarId}/events/watch"
            },
            {
              "label": "POST /freeBusy"
            },
            {
              "label": "POST /users/me/settings/watch"
            },
            {
              "label": "PATCH /calendars/{calendarId}/acl/{ruleId}"
            },
            {
              "label": "PATCH /users/me/calendarList/{calendarId}"
            },
            {
              "label": "PATCH /calendars/{calendarId}"
            },
            {
              "label": "PATCH /calendars/{calendarId}/events/{eventId}"
            },
            {
              "label": "PUT /calendars/{calendarId}/acl/{ruleId}"
            },
            {
              "label": "PUT /users/me/calendarList/{calendarId}"
            },
            {
              "label": "PUT /calendars/{calendarId}"
            },
            {
              "label": "PUT /calendars/{calendarId}/events/{eventId}"
            }
        ]
      }
    },
    {
      "label": "Headers",
      "name": "headers",
      "description": "Let the client and the server pass additional information with the HTTP request in a key value format. (e.g. key=ABC123)",
      "type": "keyValue"
    },
    {
      "label": "Query Params",
      "name": "params",
      "description": "Parameters attached to the end of a url in a key value format. (e.g. key=ABC123)",
      "type": "keyValue"
    },
    {
      "label": "Body",
      "name": "body",
      "type": "json",
      "description": "Content to be sent to the server.",
      "options": {
        "allowContextSelector": "false"
      }
    },
    {
      "label": "Override Settings",
      "name": "overrideSettings",
      "type": "boolean",
      "description": "If true, allows adding configurations",
      "defaultValue": false,
      "options": {
        "allowContextSelector": "false"
      }
    },
    {
      "label": "Follow Redirects",
      "name": "followRedirects",
      "type": "boolean",
      "description": "Follow the redirects when a HTTP request is executed",
      "visibility": "config.overrideSettings",
      "defaultValue": false,
      "options": {
        "allowContextSelector": "false"
      }
    },
    {
      "label": "Full Response",
      "name": "fullResponse",
      "type": "boolean",
      "description": "Include extended information about response",
      "visibility": "config.overrideSettings",
      "defaultValue": false,
      "options": {
        "allowContextSelector": "false"
      }
    },
    {
      "label": "Connection timeout",
      "name": "connectionTimeout",
      "description": "Connect timeout interval, in milliseconds (0 = infinity). Default value: 5000 ms (5 sec)",
      "visibility": "config.overrideSettings",
      "type": "text",
      "defaultValue": "5000",
      "typeOptions": {
        "validation": {
          "function": "!config.connectionTimeout || utils.isPlaceholder(config.connectionTimeout) || utils.getInteger(config.connectionTimeout) >= 0",
          "message": "The time must be a valid placeholder or a positive integer greater than or equal to 0. "
        }
      },
      "options": {
        "allowContextSelector": "false"
      }
    },
    {
      "label": "Read timeout",
      "name": "readTimeout",
      "description": "Read timeout interval, in milliseconds (0 = infinity). Default value: 60000 ms (60 sec)",
      "visibility": "config.overrideSettings",
      "type": "text",
      "defaultValue": "60000",
      "typeOptions": {
        "validation": {
          "function": "!config.readTimeout || utils.isPlaceholder(config.readTimeout) || utils.getInteger(config.readTimeout) >= 0",
          "message": "The time must be a valid placeholder or a positive integer greater than or equal to 0. "
        }
      },
      "options": {
        "allowContextSelector": "false"
      }
    }
  ],
  "outputs": [
    {
      "label": "Response",
      "name": "response",
      "type": "object",
      "description": "The response to external URL"
    }
  ]
}